{"ast":null,"code":"var _jsxFileName = \"/home/mario/Desktop/Procesos/pruebaFasrev/client/src/components/pages/Payment/PaymentForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport StripeService from '../../../service/stripe.service';\nimport OrderService from '../../../service/order.service';\nimport './PaymentForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripeService = new StripeService();\nconst orderService = new OrderService();\nconst cardStyle = {\n  style: {\n    base: {\n      color: \"#32325d\",\n      fontSmoothing: \"antialiased\",\n      fontSize: \"16px\",\n      \"::placeholder\": {\n        color: \"#32325d\"\n      }\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\"\n    }\n  }\n};\nexport default function CheckoutForm({\n  history,\n  total,\n  orderId\n}) {\n  _s();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    stripeService.createPayment(total, orderId).then(response => setClientSecret(response.data.clientSecret)).catch(err => console.log(err));\n  });\n\n  const updatePayment = () => {\n    orderService.makeAsPaid().then(response => console.log(response)).catch(err => console.log(err));\n  };\n\n  const handleChange = async event => {\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      updatePayment();\n      history.push('/confirm');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      className: \"btn btn-dark payment-btn\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this) : `Pay $${total}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"ldxvBX7QZH5+6XNpO6E4nXjWQL0=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/mario/Desktop/Procesos/pruebaFasrev/client/src/components/pages/Payment/PaymentForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","StripeService","OrderService","stripeService","orderService","cardStyle","style","base","color","fontSmoothing","fontSize","invalid","iconColor","CheckoutForm","history","total","orderId","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","createPayment","then","response","data","catch","err","console","log","updatePayment","makeAsPaid","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,yBAJP;AAKA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,OAAO,mBAAP;;AACA,MAAMC,aAAa,GAAG,IAAIF,aAAJ,EAAtB;AACA,MAAMG,YAAY,GAAG,IAAIF,YAAJ,EAArB;AAEA,MAAMG,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,SADH;AAEJC,MAAAA,aAAa,EAAE,aAFX;AAGJC,MAAAA,QAAQ,EAAE,MAHN;AAIJ,uBAAiB;AACfF,QAAAA,KAAK,EAAE;AADQ;AAJb,KADD;AASLG,IAAAA,OAAO,EAAE;AACPH,MAAAA,KAAK,EAAE,SADA;AAEPI,MAAAA,SAAS,EAAE;AAFJ;AATJ;AADS,CAAlB;AAiBA,eAAe,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAtB,EAAmD;AAAA;;AAEhE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACyB,UAAD,EAAaC,aAAb,IAA8B1B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAC6B,YAAD,EAAeC,eAAf,IAAkC9B,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM+B,MAAM,GAAG5B,SAAS,EAAxB;AACA,QAAM6B,QAAQ,GAAG5B,WAAW,EAA5B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,aAAa,CACV0B,aADH,CACiBd,KADjB,EACwBC,OADxB,EAEGc,IAFH,CAEQC,QAAQ,IAAIL,eAAe,CAACK,QAAQ,CAACC,IAAT,CAAcP,YAAf,CAFnC,EAGGQ,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAID,GALQ,CAAT;;AAOA,QAAMG,aAAa,GAAG,MAAM;AAE1BjC,IAAAA,YAAY,CACTkC,UADH,GAEGR,IAFH,CAEQC,QAAQ,IAAII,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAFpB,EAGGE,KAHH,CAGSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHhB;AAID,GAND;;AAQA,QAAMK,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpChB,IAAAA,WAAW,CAACgB,KAAK,CAACC,KAAP,CAAX;AACArB,IAAAA,QAAQ,CAACoB,KAAK,CAACrB,KAAN,GAAcqB,KAAK,CAACrB,KAAN,CAAYuB,OAA1B,GAAoC,EAArC,CAAR;AACD,GAHD;;AAKA,QAAMC,YAAY,GAAG,MAAMC,EAAN,IAAY;AAC/BA,IAAAA,EAAE,CAACC,cAAH;AACAvB,IAAAA,aAAa,CAAC,IAAD,CAAb;AAEA,UAAMwB,OAAO,GAAG,MAAMnB,MAAM,CAACoB,kBAAP,CAA0BtB,YAA1B,EAAwC;AAC5DuB,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAErB,QAAQ,CAACsB,UAAT,CAAoBpD,WAApB;AADQ;AAD4C,KAAxC,CAAtB;;AAMA,QAAIgD,OAAO,CAAC3B,KAAZ,EAAmB;AACjBC,MAAAA,QAAQ,CAAE,kBAAiB0B,OAAO,CAAC3B,KAAR,CAAcuB,OAAQ,EAAzC,CAAR;AACApB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHD,MAGO;AACLF,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAJ,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAmB,MAAAA,aAAa;AACbvB,MAAAA,OAAO,CAACqC,IAAR,CAAa,UAAb;AACD;AACF,GApBD;;AAsBA,sBACE;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAER,YAAlC;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,EAAE,EAAC,cAAhB;AAA+B,MAAA,OAAO,EAAEtC,SAAxC;AAAmD,MAAA,QAAQ,EAAEkC;AAA7D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,QAAQ,EAAElB,UAAU,IAAIE,QAAd,IAA0BN,SADtC;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,SAAS,EAAC,0BAHZ;AAAA,6BAKE;AAAM,QAAA,EAAE,EAAC,aAAT;AAAA,kBACGI,UAAU,gBACT;AAAK,UAAA,SAAS,EAAC,SAAf;AAAyB,UAAA,EAAE,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADS,GAGR,QAAON,KAAM;AAJlB;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,YAFF,EAgBGI,KAAK,iBACJ;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,IAAI,EAAC,OAAjC;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,YAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GA5EuBN,Y;UAOPd,S,EACEC,W;;;KARKa,Y","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport StripeService from '../../../service/stripe.service'\nimport OrderService from '../../../service/order.service'\n\nimport './PaymentForm.css'\nconst stripeService = new StripeService()\nconst orderService = new OrderService()\n\nconst cardStyle = {\n  style: {\n    base: {\n      color: \"#32325d\",\n      fontSmoothing: \"antialiased\",\n      fontSize: \"16px\",\n      \"::placeholder\": {\n        color: \"#32325d\"\n      }\n    },\n    invalid: {\n      color: \"#fa755a\",\n      iconColor: \"#fa755a\"\n    }\n  }\n};\n\nexport default function CheckoutForm({ history, total, orderId }) {\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    stripeService\n      .createPayment(total, orderId)\n      .then(response => setClientSecret(response.data.clientSecret))\n      .catch(err => console.log(err))\n  });\n\n  const updatePayment = () => {\n\n    orderService\n      .makeAsPaid()\n      .then(response => console.log(response))\n      .catch(err => console.log(err))\n  }\n\n  const handleChange = async (event) => {\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      updatePayment()\n      history.push('/confirm')\n    }\n  };\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n        className=\"btn btn-dark payment-btn\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            `Pay $${total}`\n          )}\n        </span>\n      </button>\n\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}